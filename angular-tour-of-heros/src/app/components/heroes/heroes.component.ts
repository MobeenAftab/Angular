import { Component, OnInit } from '@angular/core';
import { Hero } from '../../shared/hero';
// import { HEROES } from '../../shared/mock-heroes';
import { HeroService } from '../../services/hero.service';

// Metadata properties generated by angular of the component
@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  styleUrls: ['./heroes.component.css']
})

export class HeroesComponent implements OnInit {

  // Single hero from class
  hero: Hero = {
    id: 1,
    name: 'windstorm'
  };

  // Exposing list of heroes from mock-data
  heroes: Hero[];

  // No hero selected on init
  selectedHero: Hero;

  // Access heroService methods by injection.
  // When angular creates a HeroComp the dependency injection system sets the heroService parameter
  // to the singleton instance of HeroService
  // Reserve the constructor for simle initialization such as wiring constructor parameters to properties.
  constructor(private heroService: HeroService) { }

  // ngOnInit is a lifecycle hook angular calls after creating the component
  // its a good place to put initialization logic
  // Angular will call ngOnInit at an appropriate time after constructing a HeroComp instance.
  // Use this to make function calls to fetch data, make HTTPrequests etc.
  ngOnInit() {
    this.getHeroes();
  }

  // Respond to hero click event
  // No longer used, navigate using routerLinks and observables
  onSelect(hero) {
    this.selectedHero = hero;
  }

  // Subscribe to HeroService Promise, Returns an Observable<Hero[]>, async signature.
  // Wait for the Observable to emit the array of heroes and then subscribe passes the
  // emmited array to the callback, which sets the components heroes property.
  getHeroes(): void {
    this. heroService.getHeroes()
      .subscribe(heroes => this.heroes = heroes);
  }
  /*
  // Retrieve the heroes from the service
  getHeroes(): void {
    // This method has a synchronous (one at a time) signature.
    // This will not work in a real app.
    this.heroes = this.heroService.getHeros();
  }
  */
}
